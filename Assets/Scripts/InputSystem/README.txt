====Описание по работе с системой управления Input System Package====

Сам я разобрался, но в основном поверхностно. Есть руководство 
https://docs.unity3d.com/Packages/com.unity.inputsystem@1.0/manual/index.html
но оно не особо информативное (хотя если копать глубже...)

----------
1. Начнем. Настройка Input System в настройках проекта (Project Settings)
Тут указаны стандартные значения параметров + список устройств, которые
будут работать с нашим проектом. Лучше из этого ничего не менять.

Поле Update Mode указывает, каким образом будут обновляться нажатия
клавиш с устройства. По умолчанию стоит режим Dynamic Update, но я
заменил его на Fixed Update т.к. с ним работаем и вне его обновлять
нажатия особо не требуется

-----------
2. Папка Input System. Меню PlayerControls (не скрипт, а меню)
В данном окне настраиваем наше управление. Окно разделено на три зоны:

	1) Action Maps (карты действий). Тут создаем карту действий, которая
	является как-бы группой различных действий, объединенных под одним
	названием. Так, я создал Player - управление игрока. Можно так же
	добавить управление транспортом (Vechile), дроном (Drone) и т.п.,
	т.е. чем игрок будет управлять по ходу игры.

	2) Actions (действия). Здесь создаем сами действия (движение, прыжок,
	полет и т.п.) и добавляем к ним "кнопки/нажатия/привязки" (bindings).
	Лучше использовать ПКМ на имени действия, а не "+", т.к. в том меню
	указаны не все варианты. Возможные привязки:
		а) Binding. Просто кнопка, вкл и выкл
		б) 1D Axis. Ось (джойстик по одной оси), пока не использовал
		в) 2D Vector. Вектор, где 2 оси, указывается лево/право, вверх/низ
		г) остально не смотрел
	По сути, все они отличаются параметром Composite Type, которым и задается
	тип нажатия. Mode задает тип возвращаемого значения ReturnValue<...>

	3) Properties (настройки). Указаны настройки действий, которые выбираем
	в зоне "Actions". Тут есть раздел Interactions и Processors для действий.
	В первом указываем особенности ввода (задержка, таймер и т.п.),
	во втором - особенности обработки вывода значений (инверсия, масштаб 
	и т.п.)

НЕ ЗАБЫВАЕМ СОХРАНЯТЬ!!! Save Asset!!

----------
3. Программирование. Не все так просто :) В скрипте нужно сперва подкючить UnityEngine.InputSystem

А) Для начала необходимо объявит объект класса PlayerControls (или дочернего).

PlayerControls playerControls;


Б) Затем в Awake его активировать:

private void Awake()
{
    playerControls = new PlayerControls();    
}

Есть три режима "работы" входных сигналов:

started - обрабатывается по нажатии на кнопку
performed - обрабатывается при выполнении действия 
(к примеру Hold в Interactions)
canceled - обрабатывается по отжатии кнопки

Также и два варианта их считывания:
С помощью подписки на событие (объявляем в Awake)
                      
playerControls.Player.Move.canceled += HandleMove_Canceled;
//Подписываем действие Move в карте действий Player на событие canceled,
//и выполняется наш метод HandleMove_Canceled

Напрямую считывание в коде

if(playerControls.Player.Move.phase == InputActionPhase.Started)
{
	//Смотрим, соответствует ли фаза ("тип нажатия") нашему started
	//и тогда выполняем код
}

ОБЯЗАТЕЛЬНО активировать и отключить наше действие (дабы не мусорить)!

private void OnEnable() => playerControls.Player.Move.Enable();
private void OnDisable() => playerControls.Player.Move.Disable();

Вроде, это пока все